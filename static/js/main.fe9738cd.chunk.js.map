{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","items","useEffect","Sortable","create","document","getElementById","dragoverBubble","Container","Grid","container","justify","spacing","item","xs","sm","style","textAlign","Typography","variant","component","List","id","map","ListItem","cursor","disableGutters","ListItemText","primary","index","Button","color","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSA4DeA,MAjDf,WACE,IAAMC,EAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAQzD,OANAC,qBAAU,WACRC,IAASC,OAAOC,SAASC,eAAe,YAAa,CACnDC,gBAAgB,MAEjB,IAGD,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,GACxC,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAACC,GAAI,EAAGC,MAAO,CAAEC,UAAW,WACvC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,oDAGA,kBAACC,EAAA,EAAD,CAAMC,GAAG,YACNrB,EAAMsB,KAAI,SAAAV,GAAI,OACb,kBAACW,EAAA,EAAD,CAAUR,MAAO,CAAES,OAAQ,WAAaC,gBAAc,GACpD,kBAACC,EAAA,EAAD,CAAcX,MAAO,CAAEC,UAAW,UAAYW,QAASf,UAK/D,kBAACJ,EAAA,EAAD,CAAMI,MAAI,EAACC,IAAE,EAACC,GAAI,EAAGC,MAAO,CAAEC,UAAW,WACvC,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAnC,kCAGA,kBAACC,EAAA,EAAD,KACGpB,EAAMsB,KAAI,SAACV,EAAMgB,GAAP,OACT,kBAACL,EAAA,EAAD,CAAUE,gBAAc,GACtB,kBAACC,EAAA,EAAD,CACEX,MAAO,CAAEC,UAAW,UACpBW,QAAS,EAAIC,EAAQ,EAAI,EAAIA,EAAQ,WAOjD,kBAACpB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UACtB,kBAACmB,EAAA,EAAD,CAAQC,MAAM,UAAUZ,QAAQ,aAAhC,6DCxCYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASC,eAAe,SD2H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fe9738cd.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Sortable from \"sortablejs\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nfunction App() {\r\n  const items = [\"111\", \"222\", \"333\", \"444\", \"555\", \"666\", \"777\"];\r\n\r\n  useEffect(() => {\r\n    Sortable.create(document.getElementById(\"sortable\"), {\r\n      dragoverBubble: true\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Grid container justify=\"center\" spacing={5}>\r\n        <Grid item xs sm={3} style={{ textAlign: \"center\" }}>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            Варианты\r\n          </Typography>\r\n          <List id=\"sortable\">\r\n            {items.map(item => (\r\n              <ListItem style={{ cursor: \"pointer\" }} disableGutters>\r\n                <ListItemText style={{ textAlign: \"center\" }} primary={item} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n        <Grid item xs sm={3} style={{ textAlign: \"center\" }}>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            Баллы\r\n          </Typography>\r\n          <List>\r\n            {items.map((item, index) => (\r\n              <ListItem disableGutters>\r\n                <ListItemText\r\n                  style={{ textAlign: \"center\" }}\r\n                  primary={5 - index > 0 ? 5 - index : 0}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"center\">\r\n        <Button color=\"primary\" variant=\"contained\">\r\n          Отправить\r\n        </Button>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}